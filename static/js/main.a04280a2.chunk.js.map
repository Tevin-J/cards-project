{"version":3,"sources":["n1-main/m1-ui/common/Input.tsx","n1-main/m1-ui/common/Button.tsx","n1-main/m1-ui/common/Text.tsx","n2-features/f1-auth/a1-loginization/l1-ui/Login.tsx","n2-features/f1-auth/a5-profile/p1-ui/ProfilePage.tsx","n1-main/m1-ui/routes/Routes.tsx","n1-main/m1-ui/common/MyLink.tsx","n1-main/m1-ui/header/Header.tsx","n1-main/m1-ui/Main.tsx","n2-features/f1-auth/a1-loginization/l2-bll/loginReducer.ts","n2-features/f1-auth/a2-registration/r2-bll/regReducer.ts","n2-features/f1-auth/a3-recovery/r2-bll/recoveryPassReducer.ts","n2-features/f1-auth/a4-newPass/n2-bll/newPassReducer.ts","n2-features/f1-auth/a5-profile/p2-bll/profileReducer.ts","n2-features/f1-auth/authReducer.ts","n1-main/m2-bll/store.ts","n1-main/m1-ui/App.tsx","serviceWorker.ts","index.tsx"],"names":["Wrapper","styled","div","WrapperCheckbox","Input","props","type","id","htmlFor","className","width","height","viewBox","d","points","placeholder","Button","name","Text","text","Login","ProfilePage","Routes","path","render","span","MyLink","to","WrapperBlock","Header","Main","initialState","loginReducer","state","registrationReducer","recoveryPassReducer","newPassReducer","profileReducer","authReducer","combineReducers","rootReducer","store","createStore","applyMiddleware","thunk","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a04280a2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Wrapper = styled.div`\r\n    input {\r\n      font-family: 'Poiret One', cursive;\r\n      font-size: 20px;\r\n      font-weight: bold;\r\n      outline: none;\r\n      margin: 5px;\r\n      padding: 5px;\r\n      border: 2px solid #015668;\r\n      border-bottom-width: 4px;\r\n      background: rgba(255,255,255,1);\r\n    }\r\n  \r\n`\r\nconst WrapperCheckbox = styled.div`\r\n  input {\r\n    display: none;\r\n  }\r\n  display: grid;\r\n\r\n.check{\r\n  cursor: pointer;\r\n  position: relative;\r\n  margin: auto;\r\n  width: 18px;\r\n  height: 18px;\r\n  -webkit-tap-highlight-color: transparent;\r\n  transform: translate3d(0,0,0);\r\n  svg{\r\n    position: relative;\r\n    z-index: 1;\r\n    fill: none;\r\n    stroke-linecap: round;\r\n    stroke-linejoin: round;\r\n    stroke: #C8CCD4;\r\n    stroke-width: 1.5;\r\n    transform: translate3d(0,0,0);\r\n    transition: all .2s ease};\r\n    path{\r\n      stroke-dasharray: 60;\r\n      stroke-dashoffset: 0}\r\n    polyline {\r\n      stroke-dasharray: 22;\r\n      stroke-dashoffset: 66}\r\n  &:hover {\r\n    svg{\r\n      stroke: #015668}}\r\n}\r\n#cbx:checked + .check{\r\n  svg{\r\n    stroke: #015668}\r\n    path{\r\n      stroke-dashoffset: 60;\r\n      transition: all .3s linear}\r\n    polyline{\r\n      stroke-dashoffset: 42;\r\n      transition: all .2s linear;\r\n      transition-delay: .15s}}\r\n\r\n`\r\n\r\ntype OwnPropsType = {\r\n    placeholder?: string\r\n    type?: string\r\n}\r\ntype PropsType = OwnPropsType\r\nconst Input: React.FC<PropsType> = (props) => {\r\n    if (props.type === 'checkbox') {\r\n        return (\r\n            <WrapperCheckbox>\r\n            <input type=\"checkbox\" id=\"cbx\"/>\r\n                <label htmlFor=\"cbx\" className=\"check\">\r\n                    <svg width=\"18px\" height=\"18px\" viewBox=\"0 0 18 18\">\r\n                        <path\r\n                            d=\"M1,9 L1,3.5 C1,2 2,1 3.5,1 L14.5,1 C16,1 17,2 17,3.5 L17,14.5 C17,16 16,17 14.5,17 L3.5,17 C2,17 1,16 1,14.5 L1,9 Z\"></path>\r\n                        <polyline points=\"1 9 7 14 15 4\"></polyline>\r\n                    </svg>\r\n                </label>\r\n            </WrapperCheckbox>\r\n        )\r\n    }\r\n    return (\r\n        <Wrapper>\r\n            <input placeholder={props.placeholder} type={props.type}/>\r\n        </Wrapper>\r\n    )\r\n}\r\nexport default Input","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Wrapper = styled.div`\r\n  text-decoration: none;\r\n  outline: none;\r\n  display: inline-block;\r\n  margin: 5px;\r\n  padding: 5px 15px;\r\n  overflow: hidden;\r\n  border: 2px solid;\r\n  border-bottom-width: 4px;\r\n  font-family: 'Poiret One', cursive;\r\n  text-transform: uppercase;\r\n  font-weight: bold;\r\n  letter-spacing: 2px;\r\n  color: #015668;\r\n  background: rgba(255,255,255,1);\r\n  transition: color .3s, background .5s;\r\n  :hover {\r\n      cursor: pointer;\r\n      animation: stripes 1s infinite linear;\r\n      background: linear-gradient(45deg, #fff1cf 25%, rgba(255,255,255,1) 25%, rgba(255,255,255,1) 50%, \r\n                  #fff1cf 50%, #fff1cf 75%, rgba(255,255,255,1) 75%, rgba(255,255,255,1));\r\n      background-size: 10px 10px;\r\n      color: #015668;\r\n  }\r\n  @keyframes stripes {\r\n      0% {background-position: 0 0;}\r\n      100% {background-position: 50px 0;}\r\n  }\r\n`\r\n\r\ntype OwnPropsType = {\r\n    name: string\r\n}\r\ntype PropsType = OwnPropsType\r\nconst Button: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <Wrapper>\r\n            {props.name}\r\n        </Wrapper>\r\n    )\r\n}\r\nexport default Button","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Wrapper = styled.div`\r\n  font-family: 'Poiret One', cursive;\r\n  font-weight: bold;\r\n  font-size: 20px;\r\n  letter-spacing: 2px;\r\n  color: #015668;\r\n`\r\ntype OwnPropsType = {\r\n    text: string\r\n}\r\ntype PropsType = OwnPropsType\r\nconst Text: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <Wrapper>\r\n            {props.text}\r\n        </Wrapper>\r\n    )\r\n}\r\nexport default Text","import React from \"react\";\r\nimport Button from \"../../../../n1-main/m1-ui/common/Button\";\r\nimport Input from \"../../../../n1-main/m1-ui/common/Input\";\r\nimport Text from \"../../../../n1-main/m1-ui/common/Text\";\r\n\r\nconst Login = () => {\r\n    return (\r\n        <div>\r\n            <Input placeholder={'Введите логин'}/>\r\n            <Input placeholder={'Введите пароль'} type={'password'}/>\r\n            <Text text={'Запомнить меня'}/>\r\n            <Input type={'checkbox'}/>\r\n            <Button name={'Log in'}/>\r\n        </div>\r\n    )\r\n}\r\nexport default Login","import React from \"react\";\r\nimport Text from \"../../../../n1-main/m1-ui/common/Text\";\r\n\r\nconst ProfilePage: React.FC = () => {\r\n    return (\r\n        <Text text={'Profile Page'}/>\r\n    )\r\n}\r\nexport default ProfilePage","import {Route} from \"react-router\";\r\nimport Input from \"../common/Input\";\r\nimport Button from \"../common/Button\";\r\nimport React from \"react\";\r\nimport Login from \"../../../n2-features/f1-auth/a1-loginization/l1-ui/Login\";\r\nimport ProfilePage from \"../../../n2-features/f1-auth/a5-profile/p1-ui/ProfilePage\";\r\n\r\nexport const INPUT_PATH = '/input'\r\nexport const BUTTON_PATH = '/button'\r\nexport const LOGIN_PAGE = '/login'\r\nexport const PROFILE_PAGE = '/profile'\r\n\r\nexport const Routes: React.FC = () => {\r\n    return (\r\n        <>\r\n            <Route path={INPUT_PATH} render={() => <Input placeholder={'Введите текст'}/>}/>\r\n            <Route path={BUTTON_PATH} render={() => <Button name={'Click me!'}/>}/>\r\n\r\n            <Route path={LOGIN_PAGE} render={() => <Login/>}/>\r\n            <Route path={PROFILE_PAGE} render={() => <ProfilePage/>}/>\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Wrapper = styled.span`\r\n    padding-right: 50px;\r\n    a {\r\n      font-family: 'Great Vibes', cursive;\r\n      font-size: 40px;\r\n      text-decoration: none;\r\n      color: #fff1cf;\r\n      :hover {\r\n        color: #ffd369;\r\n      }\r\n    }\r\n    :hover {\r\n    cursor: pointer;\r\n    }\r\n`\r\ntype OwnPropsType = {\r\n    to: string\r\n    text: string\r\n}\r\ntype PropsType = OwnPropsType\r\nconst MyLink: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <Wrapper>\r\n            <NavLink to={props.to}>{props.text}</NavLink>\r\n        </Wrapper>\r\n    )\r\n}\r\nexport default MyLink","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {BUTTON_PATH, INPUT_PATH, LOGIN_PAGE} from \"../routes/Routes\";\r\nimport MyLink from \"../common/MyLink\";\r\n\r\nconst WrapperBlock = styled.div`\r\n  width: 100%;\r\n  height: 50px;\r\n  background-color: #263f44;\r\n  display:flex;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n  margin-bottom: 50px;\r\n`\r\n\r\nconst Header = () => {\r\n    return (\r\n        <WrapperBlock>\r\n            <MyLink to={BUTTON_PATH} text={'button'}/>\r\n            <MyLink to={INPUT_PATH} text={'input'}/>\r\n            <MyLink to={LOGIN_PAGE} text={'log in'}/>\r\n        </WrapperBlock>\r\n    )\r\n}\r\nexport default Header","import React from \"react\";\r\nimport {Routes} from \"./routes/Routes\";\r\nimport Header from \"./header/Header\";\r\n\r\nconst Main: React.FC = () => {\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <Routes/>\r\n        </>\r\n    )\r\n}\r\nexport default Main","type InitialStateType = {}\r\nconst initialState: InitialStateType = {}\r\nconst loginReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    return state\r\n}\r\nexport default loginReducer","type InitialStateType = {}\r\nconst initialState: InitialStateType = {}\r\nconst registrationReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    return state\r\n}\r\nexport default registrationReducer","type InitialStateType = {}\r\nconst initialState: InitialStateType = {}\r\nconst recoveryPassReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    return state\r\n}\r\nexport default recoveryPassReducer","type InitialStateType = {}\r\nconst initialState: InitialStateType = {}\r\nconst newPassReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    return state\r\n}\r\nexport default newPassReducer","type InitialStateType = {}\r\nconst initialState: InitialStateType = {}\r\nconst profileReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    return state\r\n}\r\nexport default profileReducer","import {combineReducers} from \"redux\";\r\nimport loginReducer from \"./a1-loginization/l2-bll/loginReducer\";\r\nimport registrationReducer from \"./a2-registration/r2-bll/regReducer\";\r\nimport recoveryPassReducer from \"./a3-recovery/r2-bll/recoveryPassReducer\";\r\nimport newPassReducer from \"./a4-newPass/n2-bll/newPassReducer\";\r\nimport profileReducer from \"./a5-profile/p2-bll/profileReducer\";\r\n\r\nconst authReducer = combineReducers({\r\n    loginReducer: loginReducer,\r\n    registrationReducer: registrationReducer,\r\n    recoveryPassReducer: recoveryPassReducer,\r\n    newPassReducer: newPassReducer,\r\n    profileReducer: profileReducer\r\n})\r\nexport default authReducer","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from 'redux-thunk'\r\nimport authReducer from \"../../n2-features/f1-auth/authReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    authReducer: authReducer\r\n})\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\nconst store = createStore(rootReducer, applyMiddleware(thunk))\r\nexport default store","import React from 'react';\nimport Main from \"./Main\";\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport store from \"../m2-bll/store\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  text-align: center;\n`\nconst App = () => {\n    return (\n        <Wrapper>\n            <HashRouter>\n                <Provider store={store}>\n                    <Main/>\n                </Provider>\n            </HashRouter>\n        </Wrapper>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './n1-main/m1-ui/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}